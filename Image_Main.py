# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14vmaP6NOpaZCFmsiQvRhC17qhY_48Ax3

#CSC 325
##Term Project
##Manogya Aryal
##Saumya Sharma
##Alex Jones
##Dr Junxiu Zhou
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.

import numpy as np
import os
import random
import pandas as pd


import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.image as mping
import cv2


import tensorflow


from keras.preprocessing.image import ImageDataGenerator


# %matplotlib inline

TrainingImagePath='/content/drive/MyDrive/Image Classification/train'
TestingImagePath='/content/drive/MyDrive/Image Classification/test'
ValidationImagePath='/content/drive/MyDrive/Image Classification/valid'


train_data = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.1,
    zoom_range=0.1,
    horizontal_flip=True)

test_data = ImageDataGenerator(rescale=1./255)


training_set = test_data.flow_from_directory(
    TrainingImagePath,
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical')


test_set = test_data.flow_from_directory(
    TestingImagePath,
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical')

valid_set = test_data.flow_from_directory(
    ValidationImagePath,
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical')

test_set.class_indices

TrainClasses=training_set.class_indices

ResultMap={}
for cancerValue,cancerName in zip(TrainClasses.values(), TrainClasses.keys()):
  ResultMap[cancerValue]=cancerName


import pickle
with open("/content/drive/MyDrive/Image Classification/ResultsMap.pk1", 'wb') as f:
  pickle.dump(ResultMap, f, pickle.HIGHEST_PROTOCOL)

print(ResultMap)


OutputNeurons=len(ResultMap)
print('\n Output neurons: ', OutputNeurons)

from keras.models import Sequential
from keras.layers import Flatten
from keras.layers import Dense
from keras.layers import Convolution2D
from keras.layers import MaxPool2D

classifier = Sequential()



classifier.add(Convolution2D(32, kernel_size=(3,3), strides=(1,1), input_shape=(128,128,3), activation='relu'))


classifier.add(MaxPool2D(pool_size=(2,2)))


classifier.add(Convolution2D(64, kernel_size=(3, 3), strides=(1, 1), activation='relu'))


classifier.add(MaxPool2D(pool_size=(2,2)))

classifier.add(Flatten())

classifier.add(Dense(256, activation='relu'))

classifier.add(Dense(OutputNeurons, activation='softmax'))


classifier.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=["accuracy"])

classifier.summary()

import time

StartTime = time.time()


history=classifier.fit(
    training_set,
    steps_per_epoch=len(training_set),
    epochs=30,
    validation_data=valid_set,
    validation_steps=len(valid_set),
    verbose=1)
print(history.history.keys())

EndTime=time.time()
print("Time taken: ", round((EndTime-StartTime)/60), 'Minutes')

accuracy = history.history['accuracy']
val_accuracy = history.history['val_accuracy']

loss= history.history['loss']
val_loss=history.history['val_loss']

plt.figure(figsize=(15,10))

plt.subplot(2,2,1)
plt.plot(accuracy, label = "Training accuracy")
plt.plot(val_accuracy, label="Validation accuracy")
plt.legend()
plt.title("Training vs Validation Accuracy")
plt.show()

plt.figure(figsize=(15,10))
plt.subplot(2,2,1)
plt.plot(loss, label = "Training loss")
plt.plot(val_loss, label="Validation loss")
plt.legend()
plt.title("Training vs Validation Loss")

plt.show()